{"version":3,"sources":["localConfig/quesConfig.js","components/CustomHooks/useSessionStorage.js","store/actions.js","components/FreeTextQues/FreeTextQues.js","components/SingleChoiceQues/SingleChoiceQues.js","components/QuestionList/QuestionList.js","components/TestReport/Report/Report.js","components/TestReport/TestReport.js","containers/TestPage/TestPage.js","App.js","reportWebVitals.js","store/reducer.js","index.js"],"names":["DIFFICULTLEVEL","QUESTYPE","useSessionStorage","key","initialValue","useState","sessionStorage","getItem","JSON","parse","SETQUESTIONS","UPDATEANSWERS","FreeTextQues","props","dispatch","useDispatch","question","id","toString","difficulty_level_id","textValue","setTextValue","error","setError","textValueChangeHandler","e","answer_id","question_type_id","isNaN","target","value","question_id","answer","type","actionTypes","provided_answer","updateAnswers","setItem","stringify","className","dangerouslySetInnerHTML","__html","content","onChange","choices","style","color","SingleChoiceQues","selectedOption","setSelectedOption","optionSelectHandler","map","choice","checked","QuestionList","listQuestions","questions","Report","console","log","useSelector","state","filter","isCorrect","fontWeight","providedAnswer","find","selected","assigned_score","TestReport","showReport","setShowReport","score","reduce","total","ques","detailedReport","useMemo","Object","keys","textAlign","onClick","retakeTest","TestPage","quesFetchError","setQuesFetchError","difficultLevel","setDifficultLevel","isSubmitted","setIsSubmitted","useEffect","axios","get","then","result","payload","data","catch","selectedQuestions","active","pageContent","visibility","preventDefault","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","updatedAnswerList","forEach","element","parseInt","isAnswered","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c669a8f.chunk.js","sourcesContent":["export const DIFFICULTLEVEL={\r\n    1: 'Easy',\r\n    2: 'Medium',\r\n    3: 'Hard'\r\n}\r\nexport const QUESTYPE={\r\n    'FreeText': 1,\r\n    'SingleChoice': 2,\r\n    'FreeTextOnlyNumbers': 3\r\n}","import { useState } from \"react\";\r\n\r\nexport const useSessionStorage= (key, initialValue) => {\r\n    const [value, setValue]=useState(()=>{\r\n    return sessionStorage.getItem(key) ? JSON.parse(sessionStorage.getItem(key)) : initialValue;\r\n})\r\n    return [value,setValue]\r\n}","export const SETQUESTIONS='SETQUESTIONS';\r\nexport const UPDATEANSWERS='UPDATEANSWERS';","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {useSessionStorage} from '../CustomHooks';\r\n\r\nimport { QUESTYPE } from '../../localConfig/quesConfig';\r\nimport * as actionTypes from '../../store/actions'\r\n\r\nconst FreeTextQues = (props) =>{\r\n    // console.log(props.question)\r\n    const dispatch=useDispatch();\r\n    const updateAnswers=(question_id, answer_id, answer) =>dispatch({\r\n        type: actionTypes.UPDATEANSWERS,\r\n        question_id: question_id,\r\n        answer_id: answer_id,\r\n        provided_answer: answer\r\n    })\r\n    /* const [textValue, setTextValue]=useState(()=>{\r\n        return sessionStorage.getItem(props.question.id.toString() + props.question.difficulty_level_id.toString()) ? JSON.parse(sessionStorage.getItem(props.question.id.toString() + props.question.difficulty_level_id.toString())) : '';\r\n    }) */\r\n    const [textValue, setTextValue]=useSessionStorage(props.question.id.toString() + props.question.difficulty_level_id.toString(), '')\r\n    \r\n    const [error, setError]=useState('')\r\n\r\n    const textValueChangeHandler=(e, answer_id)=>{\r\n        if(props.question.question_type_id === QUESTYPE.FreeTextOnlyNumbers && isNaN(e.target.value)){\r\n            setError(\"Only numbers are allowed for this answer\")\r\n        }\r\n        else{ \r\n            setTextValue(e.target.value)\r\n            setError('')\r\n            updateAnswers(props.question.id, answer_id, e.target.value)\r\n            sessionStorage.setItem(props.question.id.toString() + props.question.difficulty_level_id.toString(), JSON.stringify(e.target.value))\r\n        }\r\n    }\r\n\r\n    return <div className='FreeTextQues'>\r\n        <div dangerouslySetInnerHTML={{__html: props.question.content}}/>\r\n        <textarea value={textValue} onChange={(e)=>textValueChangeHandler(e,props.question.choices[0].id)}/>\r\n        <p style={{color: 'red'}}>{error}</p>\r\n    </div> ;\r\n}\r\n\r\nexport default FreeTextQues;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as actionTypes from '../../store/actions'\r\nimport { useSessionStorage } from '../CustomHooks';\r\nimport './SingleChoiceQues.css'\r\n\r\nconst SingleChoiceQues =(props) =>{\r\n    // console.log('[SingleChoiceQues.js]', props.question)\r\n    const dispatch=useDispatch();\r\n    const updateAnswers=(question_id, answer_id, provided_answer) =>dispatch({\r\n        type: actionTypes.UPDATEANSWERS,\r\n        question_id: question_id,\r\n        answer_id: answer_id,\r\n        provided_answer: provided_answer\r\n    })\r\n\r\n    const [selectedOption, setSelectedOption]=useSessionStorage(props.question.id, null)\r\n\r\n    const optionSelectHandler = (e,id, answer) =>{\r\n        sessionStorage.setItem(props.question.id, JSON.stringify(id))\r\n        setSelectedOption(id)\r\n        updateAnswers(props.question.id, id, answer)\r\n    }\r\n\r\n    return<div className='SingleChoiceQues'>\r\n        <div dangerouslySetInnerHTML={{__html: props.question.content}}/>\r\n        {props.question.choices.map(choice=>{\r\n            // console.log(choice.id , selectedOption)\r\n            return <div key={choice.id}>\r\n            <input type='radio' value={choice.content} checked={choice.id === selectedOption} onChange={(e)=>{optionSelectHandler(e,choice.id, choice.content)}}/>\r\n            <span className='Radio' key={choice.id} dangerouslySetInnerHTML={{__html: choice.content}}/>\r\n            </div>\r\n        })}\r\n    </div>\r\n}\r\n\r\nexport default SingleChoiceQues;","import React from 'react';\r\n\r\nimport { QUESTYPE } from '../../localConfig/quesConfig';\r\nimport FreeTextQues from '../FreeTextQues/FreeTextQues';\r\nimport SingleChoiceQues from '../SingleChoiceQues/SingleChoiceQues';\r\n\r\nimport './QuestionList.css'\r\n\r\nconst QuestionList=(props)=>{\r\n    let listQuestions=props.questions.map((question)=>{\r\n        if(question.question_type_id === QUESTYPE.SingleChoice){\r\n            return <li key={question.id.toString() + question.difficulty_level_id.toString()}>\r\n                <SingleChoiceQues question={question}/>\r\n            </li>\r\n        }\r\n        else{\r\n            return <li key={question.id.toString()+question.difficulty_level_id.toString()}>\r\n                <FreeTextQues question={question}/>\r\n            </li>\r\n        }\r\n    })\r\n\r\n    return<div className='QuestionList'>\r\n        <ol>\r\n        {listQuestions}\r\n        </ol>\r\n    </div>\r\n}\r\n\r\nexport default QuestionList;","import { useSelector } from 'react-redux';\r\nimport React from 'react';\r\n\r\nconst Report = (props) => {\r\n    console.log(props)\r\n    const questions=useSelector(state=> state.questions)\r\n    return(\r\n        <ol>\r\n            {questions.filter(question=>question.difficulty_level_id === +props.id).map(question => {\r\n                return(\r\n                    <li key={question.id}>\r\n                        <span dangerouslySetInnerHTML={{__html: question.content}}/>\r\n                        {question.question_type_id !== 2 && <>\r\n                            <div style={{\r\n                                color: question.isCorrect ? 'green' : 'red'\r\n                            }}>Your Answer: <span style={{fontWeight: 'bold'}}>{\r\n                                question.provided_answer ? question.provided_answer : 'Not Answered'\r\n                                }</span>\r\n                            </div>\r\n                            <div style={{\r\n                                color: 'green'\r\n                                }}>Correct Ans: <span style={{fontWeight: 'bold'}}>{question.choices[0].content}</span></div>\r\n                            </>\r\n                        }\r\n                        {question.question_type_id === 2 && <>\r\n                            <div style={{color: question.isCorrect ? 'green' : 'red'}}>Your Answer: {\r\n                                question.providedAnswer ? <span dangerouslySetInnerHTML={{__html: question.providedAnswer}}/> : \r\n                                <span style={{fontWeight: 'bold'}}>Not Answered</span>\r\n                            }</div>\r\n                            <div style={{color: 'green'}}>Correct Answer: {\r\n                                <span dangerouslySetInnerHTML={{__html: question.choices.find(choice => choice.selected).content}}/>\r\n                            }</div>\r\n                        </>}\r\n                        <div>Score: {question.assigned_score}</div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ol>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useMemo } from 'react';\r\n// import { useSelector } from 'react-redux';\r\n\r\nimport Report from './Report/Report';\r\nimport { DIFFICULTLEVEL } from '../../localConfig/quesConfig';\r\nimport './TestReport.css';\r\nimport { useSessionStorage } from '../CustomHooks';\r\n\r\nconst TestReport =(props)=>{\r\n    /* const {questions}= useSelector(state=>{\r\n        return{\r\n            questions: state.questions,\r\n        }\r\n    }) */\r\n\r\n    const [showReport, setShowReport] = useSessionStorage('showReport', false)\r\n\r\n    const questions=JSON.parse(sessionStorage.getItem('questions'))\r\n\r\n    let score=questions.filter(question => question.question_type_id !== 1 && question.isCorrect)\r\n    .reduce((total, ques)=> {\r\n        return total + ques.assigned_score\r\n    }, 0)\r\n\r\n    const detailedReport=useMemo(()=>{\r\n        sessionStorage.setItem('showReport', JSON.stringify(showReport))\r\n        return (Object.keys(DIFFICULTLEVEL).map(key => {\r\n            return<div key={key}>\r\n                <h1>{DIFFICULTLEVEL[key]}</h1>\r\n                <Report id={key}/>\r\n            </div>\r\n        }))\r\n    }, [questions])\r\n\r\n    return <div className='TestReport'>\r\n                <section style={{textAlign: 'center'}}>\r\n                    <h1 >Your Score is {score}</h1>\r\n                    <button onClick={props.retakeTest}>Retake</button>\r\n                    <button className='ReportButton' onClick={()=>{setShowReport(!showReport)}}>\r\n                        {!showReport ? \"Show Report\" : \"Hide Report\"}\r\n                    </button>\r\n                </section>\r\n                {/* <p>Detail Report</p> */}\r\n                {showReport ? detailedReport : null}\r\n    </div>\r\n}\r\n\r\nexport default TestReport;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nimport QuestionList from '../../components/QuestionList/QuestionList';\r\nimport TestReport from '../../components/TestReport/TestReport';\r\nimport * as actionTypes from '../../store/actions';\r\n\r\nimport './TestPage.css';\r\nimport { DIFFICULTLEVEL } from '../../localConfig/quesConfig';\r\nimport { useSessionStorage } from '../../components/CustomHooks';\r\n\r\n\r\nconst TestPage = () =>{\r\n    // const [questions, setQues]=useState([])\r\n    const dispatch=useDispatch();\r\n    const questions=useSelector(state=> state.questions)\r\n    \r\n    const setQuestions=(payload)=>dispatch({\r\n        type: actionTypes.SETQUESTIONS,\r\n        questions: payload\r\n    })\r\n\r\n    const [quesFetchError, setQuesFetchError]=useState(false)\r\n    \r\n    const [difficultLevel, setDifficultLevel]=useSessionStorage('difficultLevel',1)\r\n\r\n    const [isSubmitted, setIsSubmitted]=useState(false)\r\n\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/questions').then(result=>{\r\n            setQuesFetchError(false)\r\n            setQuestions(result.data)\r\n        }).catch(error=>{\r\n            setQuesFetchError(true)\r\n        })\r\n    }, [])\r\n\r\n    const nextLevelHandler=(e)=>{\r\n        e.preventDefault();\r\n        sessionStorage.setItem('difficultLevel',JSON.stringify(difficultLevel+1))\r\n        setDifficultLevel(difficultLevel+1)\r\n    }\r\n    const prevLevelHandler=(e)=>{\r\n        e.preventDefault();\r\n        sessionStorage.setItem('difficultLevel',JSON.stringify(difficultLevel-1))\r\n        setDifficultLevel(difficultLevel-1)\r\n    }\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        sessionStorage.setItem('questions',JSON.stringify(questions))\r\n        setIsSubmitted(true)\r\n    }\r\n    // console.log(questions, quesFetchError, difficultLevel)\r\n\r\n    let selectedQuestions=questions.filter(question => question.difficulty_level_id === difficultLevel && question.active)\r\n    console.log(selectedQuestions)\r\n    let pageContent = !quesFetchError ? (\r\n        <form className='TestPage'>\r\n            <h1 style={{textAlign: 'center'}}>{DIFFICULTLEVEL[difficultLevel]}</h1>\r\n        <main>\r\n            {selectedQuestions && <QuestionList questions={selectedQuestions} />}\r\n        </main>\r\n        <section className='Navigation'>\r\n            <button className='PrevLevel' style={{visibility: difficultLevel>1 ? 'visible' : 'hidden' }} onClick={prevLevelHandler}>\r\n                {'<'}\r\n            </button>\r\n            {difficultLevel <3 && <button className='NextLevel' onClick={nextLevelHandler}>\r\n                {'>'}\r\n            </button>}\r\n            {difficultLevel === 3 && <button className='Submit' onClick={submitHandler}>\r\n                Submit\r\n            </button>}\r\n        </section>\r\n    </form>\r\n    ) : <p>404 Page not found</p>;\r\n\r\n    return <>\r\n        {isSubmitted ? <TestReport retakeTest={()=>{\r\n            setDifficultLevel(1)\r\n            setIsSubmitted(false)\r\n        }}/> : pageContent}\r\n    </>\r\n}\r\n\r\nexport default TestPage","import React from 'react';\n// import { Route, Switch, Redirect } from 'react-router-dom';\n\nimport './App.css';\nimport TestPage from './containers/TestPage/TestPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TestPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from './actions';\r\n\r\nconst initialState={\r\n    questions: []\r\n}\r\n\r\nconst reducer =(state=initialState, action)=>{\r\n    switch (action.type){\r\n        case actionTypes.SETQUESTIONS:\r\n            return{\r\n                ...state,\r\n                questions: action.questions.filter(question => question.active)\r\n            }\r\n        case actionTypes.UPDATEANSWERS:\r\n            let updatedAnswerList=[...state.questions].map(question => {\r\n                if(question.id === action.question_id){\r\n                    let isCorrect=false;\r\n                    question.choices.forEach(element => {\r\n                        if(element.id === action.answer_id && ((question.question_type_id ===2 && element.selected === true) || (question.question_type_id ===3 && element.content === parseInt(action.provided_answer)))){\r\n                            isCorrect=true\r\n                            console.log(isCorrect)\r\n                        }\r\n                    });\r\n                    return {\r\n                        ...question,\r\n                        isAnswered: true,\r\n                        isCorrect: isCorrect,\r\n                        providedAnswer: action.provided_answer\r\n                    }\r\n                }\r\n                else{\r\n                    return question\r\n                }\r\n            })\r\n            return{\r\n                ...state,\r\n                questions: updatedAnswerList\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducer from './store/reducer';\n\nconst store=createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}